#include "ChanceCard.h"
#include "CommunityChestCard.h"
#include "Player.h"
#include "Game.h"
#include "Board.h"
#include "Card.h"
#include <iostream>

void AdvanceToCard::execute(Player& player, Game& game) {
    int currentPosition = player.getPosition();
    int newPosition = game.getBoard().getSquareIndexByName(destination);
    
    if (newPosition == -1) {
        std::cout << "Error: Destination square '" << destination << "' not found." << std::endl;
        return;
    }
    
    if (newPosition < currentPosition) {
        std::cout << player.getName() << " passes GO and collects $200" << std::endl;
        player.addMoney(200);
    }
    player.moveToPosition(newPosition);
    std::cout << player.getName() << " advances to " << destination << std::endl;
    
    // Land on the new square
    game.getBoard().getSquare(newPosition)->landedOn(player);
}

void CollectCard::execute(Player& player, Game& game) {
    (void)game;
    player.addMoney(amount);
    std::cout << player.getName() << " collects $" << amount << std::endl;
}

void PayCard::execute(Player& player, Game& game) {
    (void)game;
    player.removeMoney(amount);
    std::cout << player.getName() << " pays $" << amount << std::endl;
}

void GetOutOfJailCard::execute(Player& player, Game& game) {
    (void)game;
    player.addGetOutOfJailCard();
    std::cout << player.getName() << " receives a Get Out of Jail Free card" << std::endl;
}

void GoToJailCard::execute(Player& player, Game& game) {
    game.sendPlayerToJail(player);
}#ifndef CARD_H
#define CARD_H

#include <string>

class Game;
class Player;

class Card {
protected:
    std::string description;

public:
    Card(const std::string& desc) : description(desc) {}
    virtual ~Card() = default;

    virtual void execute(Player& player, Game& game) = 0;
    std::string getDescription() const { return description; }
};

#endif // CARD_H#ifndef CHANCE_CARD_H
#define CHANCE_CARD_H

#include "Card.h"

class ChanceCard : public Card {
public:
    ChanceCard(const std::string& desc) : Card(desc) {}
    virtual void execute(Player& player, Game& game) override = 0;
};

// Specific Chance card types
class AdvanceToCard : public ChanceCard {
private:
    std::string destination;
public:
    AdvanceToCard(const std::string& dest) : ChanceCard("Advance to " + dest), destination(dest) {}
    void execute(Player& player, Game& game) override;
};

class CollectCard : public ChanceCard {
private:
    int amount;
public:
    CollectCard(int amt, const std::string& reason) : ChanceCard(reason + ". Collect $" + std::to_string(amt)), amount(amt) {}
    void execute(Player& player, Game& game) override;
};

class PayCard : public ChanceCard {
private:
    int amount;
public:
    PayCard(int amt, const std::string& reason) : ChanceCard(reason + ". Pay $" + std::to_string(amt)), amount(amt) {}
    void execute(Player& player, Game& game) override;
};

class GetOutOfJailCard : public ChanceCard {
public:
    GetOutOfJailCard() : ChanceCard("Get Out of Jail Free") {}
    void execute(Player& player, Game& game) override;
};

class GoToJailCard : public ChanceCard {
public:
    GoToJailCard() : ChanceCard("Go to Jail. Go directly to Jail, do not pass Go, do not collect $200") {}
    void execute(Player& player, Game& game) override;
};

#endif // CHANCE_CARD_H#include "ChanceSquare.h"
#include "Player.h"
#include "Game.h"
#include <iostream>

void ChanceSquare::landedOn(Player& player) {
    std::cout << player.getName() << " landed on Chance" << std::endl;
    Game* game = player.getGame();
    if (game) {
        game->drawChanceCard(player);
    } else {
        std::cerr << "Error: Game pointer is null" << std::endl;
    }
}#ifndef CHANCE_SQUARE_H
#define CHANCE_SQUARE_H

#include "Square.h"

class ChanceSquare : public Square {
public:
    ChanceSquare(const std::string& name) : Square(name) {}
    void landedOn(Player& player) override;
};

#endif // CHANCE_SQUARE_H#include "CommunityChestCard.h"
#include <iostream>

CollectFromEachPlayerCard::CollectFromEachPlayerCard(int amount, const std::string& desc)
    : Card(desc+". Each player should give you $10"), amount(amount) {}

void CollectFromEachPlayerCard::execute(Player& player, Game& game) {
    std::cout << player.getName() << " " << getDescription() << std::endl;
    int totalCollected = 0;
    for (const auto& otherPlayer : game.getPlayers()) {
        if (otherPlayer.get() != &player) {
            if (otherPlayer->getMoney() >= amount) {
                otherPlayer->removeMoney(amount);
                player.addMoney(amount);
                totalCollected += amount;
                std::cout << otherPlayer->getName() << " pays $" << amount << " to " << player.getName() << std::endl;
            } else {
                std::cout << otherPlayer->getName() << " is bankrupt and cannot pay." << std::endl;
                game.transferAssets(*otherPlayer, player);
                game.removePlayer(otherPlayer.get());
            }
        }
    }
    std::cout << player.getName() << " collected a total of $" << totalCollected << std::endl;
}// In CommunityChestCard.h
#ifndef COMMUNITY_CHEST_CARD_H
#define COMMUNITY_CHEST_CARD_H

#include "Card.h"
#include "Player.h"
#include "Game.h"

class CollectFromEachPlayerCard : public Card {
public:
    CollectFromEachPlayerCard(int amount, const std::string& desc);
    void execute(Player& player, Game& game) override;

private:
    int amount;
};

#endif // COMMUNITY_CHEST_CARD_H

#include "CommunityChestSquare.h"
#include "Player.h"
#include "Game.h"
#include <iostream>

void CommunityChestSquare::landedOn(Player& player) {
    std::cout << player.getName() << " landed on Community Chest" << std::endl;
    Game* game = player.getGame();
    if (game) {
        game->drawCommunityChestCard(player);
    } else {
        std::cerr << "Error: Game pointer is null" << std::endl;
    }
}#ifndef COMMUNITY_CHEST_SQUARE_H
#define COMMUNITY_CHEST_SQUARE_H

#include "Square.h"

class CommunityChestSquare : public Square {
public:
    CommunityChestSquare(const std::string& name) : Square(name) {}
    void landedOn(Player& player) override;
};

#endif // COMMUNITY_CHEST_SQUARE_H